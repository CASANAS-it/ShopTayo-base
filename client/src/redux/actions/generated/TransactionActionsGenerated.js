/**
 *
 *
  _____                      _              _ _ _     _   _     _        __ _ _
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|

 * DO NOT EDIT THIS FILE!!
 *
 *  TO CUSTOMIZE FUNCTIONS IN TransactionActionsGenerated.js PLEASE EDIT ../TransactionActions.js
 *
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 *
 */

import * as types from "../../actionTypes";
import TransactionApi from "../../../api/TransactionApi";

let actionsFunction = {

  //CRUD METHODS

  // Create transaction
  createTransaction: function(transaction) {
    return function(dispatch) {
      return TransactionApi
        .createTransaction(transaction)
        .then(transaction => {
          dispatch(actionsFunction.createTransactionSuccess(transaction));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  createTransactionSuccess: function(transaction) {
    return { type: types.CREATE_TRANSACTION_SUCCESS, payload: transaction };
  },


  // Delete transaction
  deleteTransaction: function(id) {
    return function(dispatch) {
      return TransactionApi
        .deleteTransaction(id)
        .then(transaction => {
          dispatch(actionsFunction.deleteTransactionSuccess(transaction));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  deleteTransactionSuccess: function(transaction) {
    return { type: types.DELETE_TRANSACTION_SUCCESS, payload: transaction };
  },


  // Find by _productTransaction
  findBy_productTransaction: function(key) {
    return function(dispatch) {
      return TransactionApi
        .findBy_productTransaction(key)
        .then(item => {
          dispatch(actionsFunction.findBy_productTransactionSuccess(item));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  findBy_productTransactionSuccess: function(item) {
    return { type: types.FINDBY_PRODUCTTRANSACTION_TRANSACTION_SUCCESS, payload: item };
  },


  // Get transaction
  loadTransaction: function(id) {
    return function(dispatch) {
      return TransactionApi
        .getOneTransaction(id)
        .then(transaction => {
          dispatch(actionsFunction.loadTransactionSuccess(transaction));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadTransactionSuccess: function(transaction) {
    return { type: types.GET_TRANSACTION_SUCCESS, payload: transaction };
  },

  // Load  list
  loadTransactionList: function() {
    return function(dispatch) {
      return TransactionApi
        .getTransactionList()
        .then(list => {
          dispatch(actionsFunction.loadTransactionListSuccess(list));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadTransactionListSuccess: function(list) {
    return { type: types.LIST_TRANSACTION_SUCCESS, payload: list };
  },

	
  // Save transaction
  saveTransaction: function(transaction) {
    return function(dispatch) {
      return TransactionApi
        .saveTransaction(transaction)
        .then(transaction => {
          dispatch(actionsFunction.saveTransactionSuccess(transaction));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  saveTransactionSuccess: function(transaction) {
    return { type: types.UPDATE_TRANSACTION_SUCCESS, payload: transaction };
  },


};

export default actionsFunction;
