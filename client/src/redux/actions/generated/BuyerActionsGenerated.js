/**
 *
 *
  _____                      _              _ _ _     _   _     _        __ _ _
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|

 * DO NOT EDIT THIS FILE!!
 *
 *  TO CUSTOMIZE FUNCTIONS IN BuyerActionsGenerated.js PLEASE EDIT ../BuyerActions.js
 *
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 *
 */

import * as types from "../../actionTypes";
import BuyerApi from "../../../api/BuyerApi";

let actionsFunction = {

  //CRUD METHODS

  // Create buyer
  createBuyer: function(buyer) {
    return function(dispatch) {
      return BuyerApi
        .createBuyer(buyer)
        .then(buyer => {
          dispatch(actionsFunction.createBuyerSuccess(buyer));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  createBuyerSuccess: function(buyer) {
    return { type: types.CREATE_BUYER_SUCCESS, payload: buyer };
  },


  // Delete buyer
  deleteBuyer: function(id) {
    return function(dispatch) {
      return BuyerApi
        .deleteBuyer(id)
        .then(buyer => {
          dispatch(actionsFunction.deleteBuyerSuccess(buyer));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  deleteBuyerSuccess: function(buyer) {
    return { type: types.DELETE_BUYER_SUCCESS, payload: buyer };
  },


  // Find by _buyerTransaction
  findBy_buyerTransaction: function(key) {
    return function(dispatch) {
      return BuyerApi
        .findBy_buyerTransaction(key)
        .then(item => {
          dispatch(actionsFunction.findBy_buyerTransactionSuccess(item));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  findBy_buyerTransactionSuccess: function(item) {
    return { type: types.FINDBY_BUYERTRANSACTION_BUYER_SUCCESS, payload: item };
  },


  // Get buyer
  loadBuyer: function(id) {
    return function(dispatch) {
      return BuyerApi
        .getOneBuyer(id)
        .then(buyer => {
          dispatch(actionsFunction.loadBuyerSuccess(buyer));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadBuyerSuccess: function(buyer) {
    return { type: types.GET_BUYER_SUCCESS, payload: buyer };
  },

  // Load  list
  loadBuyerList: function() {
    return function(dispatch) {
      return BuyerApi
        .getBuyerList()
        .then(list => {
          dispatch(actionsFunction.loadBuyerListSuccess(list));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadBuyerListSuccess: function(list) {
    return { type: types.LIST_BUYER_SUCCESS, payload: list };
  },

	
  // Save buyer
  saveBuyer: function(buyer) {
    return function(dispatch) {
      return BuyerApi
        .saveBuyer(buyer)
        .then(buyer => {
          dispatch(actionsFunction.saveBuyerSuccess(buyer));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  saveBuyerSuccess: function(buyer) {
    return { type: types.UPDATE_BUYER_SUCCESS, payload: buyer };
  },


  /*
  Name: validate
  Description: Validates buyer
  Params: 
    Number id - id of the buyer
  */
  validate: function(...params) {
    return function(dispatch) {
      return BuyerApi
        .validate(params)
        .then( result => {
          dispatch(actionsFunction.validateSuccess(result));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  validateSuccess: function(result) {
    return { type: types.VALIDATE_BUYER_SUCCESS, payload: result };
  },
		
};

export default actionsFunction;
